" Change default font so it does not cut letters in italic
set guifont="Ubuntu Mono 12"

" set colors:
" choose from http://vimcolorschemetest.googlecode.com/svn/html/index-html.html
set t_Co=256
if has('gui_running')
  color molokai
else
  color solarized
end

" disable spell check, not well supported in no_gui
setlocal nospell

" set color column at 80 characters
setlocal colorcolumn=81
highlight ColorColumn ctermbg=7
highlight ColorColumn guibg=black

" delegate colorscheme configuration to config/color/<colorscheme>.vim files
"autocmd ColorScheme * execute 'runtime config/color/'. g:colors_name .'.vim'

" highlight the maximum textwidth limit using a colored column
set colorcolumn=+1
autocmd ColorScheme * highlight! link ColorColumn CursorColumn

" terminals that I typically use have a dark background color
set background=dark

if &term =~ '256color'
  " Disable Background Color Erase (BCE) so that color schemes
  " work properly when Vim is used inside tmux and GNU screen.
  " See also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif

"Prefer a slightly higher line height
set linespace=2

"So long lines wrap at the end of the window
set wrap

"Indentation is 2 spaces
set tabstop=2
set shiftwidth=2
set softtabstop=2

"Map escape key to jj -- much faster
imap jj <esc>

" Switch between buffers
noremap <tab> :bn<CR>
noremap <S-tab> :bp<CR>

" window splitting
nmap <leader>sw<left>  :topleft  vnew<CR>
nmap <leader>sw<right> :botright vnew<CR>
nmap <leader>sw<up>    :topleft  new<CR>
nmap <leader>sw<down>  :botright new<CR>

" buffer splitting
nmap <leader>s<left>   :leftabove  vnew<CR>
nmap <leader>s<right>  :rightbelow vnew<CR>
nmap <leader>s<up>     :leftabove  new<CR>
nmap <leader>s<down>   :rightbelow new<CR>

" split navigation
map <leader>h :wincmd h<CR>
map <leader>j :wincmd j<CR>
map <leader>k :wincmd k<CR>
map <leader>l :wincmd l<CR>

" Ignore some binary, versioning and backup files when auto-completing
set wildignore+=.svn,CVS,.git,*.swp,*.jpg,*.png,*.gif,*.pdf,*.bak,*.orig,*/public/*
" Set a lower priority for .old files
set suffixes+=.old

let g:ctrlp_working_path_mode = 'ra'
" Use git listing, including untracked files
unlet g:ctrlp_user_command
let g:ctrlp_user_command =
  \ ['.git', 'cd %s && git ls-files . -co --exclude-standard']

" NerdTree
let NERDTreeQuitOnOpen=1
let NERDTreeShowBookmarks=0
" open file browser
map <leader>p :NERDTreeToggle<cr>
"""""""turn off nerdtree:
""""""let loaded_nerd_tree=0
""""""
""""""
" EXTERNAL COPY / PASTE
" Press F2 before and after pasting from an external Window, not required for
" MacVim
set pastetoggle=<F2>

" AutoClose
let g:AutoClosePairs = {'(': ')', '{': '}', '[': ']', '"': '"', "'": "'", '#{': '}'}
let g:AutoCloseProtectedRegions = ["Character"]

" Easy commenting
nnoremap // :TComment<CR>
vnoremap // :TComment<CR>

" Using Ctags
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
" The above mappings allow the following functionality:
" Ctrl+ç (is equivalent to Ctrl+\): open definition in new tab
" Alt++ (is equivalent to Alt+]): open definition in vertical split 
" C++ (equivalent to C+]): go to definition
" C+T : jump back to caller.

" Ctags toggle tags window for current file:
nmap <F8> :TagbarToggle<CR>

" remap Ultisnips for compatibility for YCM
let g:UltiSnipsExpandTrigger = 'uu'
let g:UltiSnipsJumpForwardTrigger = 'uu'
let g:UltiSnipsJumpBackwardTrigger = 'UU'

" ---------------------------------------------------------------------------
" Ruby/Rails
" ---------------------------------------------------------------------------
"fix grep
"":let Grep_Find_Use_Xargs = 0
"":let Grep_Default_Filelist = '*.rb'

" Execute current buffer as ruby
map <S-r> :w !ruby<CR>

map <leader>gv :CommandTFlush<cr>\|:CommandT app/views<cr>
map <leader>gc :CommandTFlush<cr>\|:CommandT app/controllers<cr>
map <leader>gm :CommandTFlush<cr>\|:CommandT app/models<cr>
map <leader>gh :CommandTFlush<cr>\|:CommandT app/helpers<cr>
map <leader>gl :CommandTFlush<cr>\|:CommandT lib<cr>
map <leader>gp :CommandTFlush<cr>\|:CommandT public<cr>
map <leader>gs :CommandTFlush<cr>\|:CommandT public/stylesheets<cr>
map <leader>ga :CommandTFlush<cr>\|:CommandT app/assets<cr>

" View routes or Gemfile in large split
map <leader>gr :topleft :split config/routes.rb<cr>
map <leader>gg :topleft 100 :split Gemfile<cr>

" Skip to Model, View or Controller
map <Leader>m :Rmodel
map <Leader>v :Rview
map <Leader>c :Rcontroller

" Other files to consider Ruby
au BufRead,BufNewFile Gemfile,Rakefile,Thorfile,config.ru,Vagrantfile,Guardfile,Capfile,*.cap set ft=ruby
au BufRead,BufNewFile *.pdf.prawn set ft=ruby
autocmd BufNewFile,BufRead *.html.slim set filetype=slim

