" Change default font so it does not cut letters in italic
set guifont="Ubuntu Mono 12"

" set colors:
" choose from http://vimcolorschemetest.googlecode.com/svn/html/index-html.html
set t_Co=256
if has('gui_running')
  color molokai
else
  "color solarized
  color molokai
end

" disable spell check, not well supported in no_gui
set nospell

" set color column at 80 characters
set colorcolumn=81
highlight ColorColumn ctermbg=7
highlight ColorColumn guibg=black

" delegate colorscheme configuration to config/color/<colorscheme>.vim files
"autocmd ColorScheme * execute 'runtime config/color/'. g:colors_name .'.vim'

" highlight the maximum textwidth limit using a colored column
set colorcolumn=+1
autocmd ColorScheme * highlight! link ColorColumn CursorColumn

" terminals that I typically use have a dark background color
set background=dark


"Prefer a slightly higher line height
set linespace=2

"So long lines wrap at the end of the window
set wrap

"Indentation is 2 spaces
set tabstop=2
set shiftwidth=2
set softtabstop=2

" This makes RVM work inside Vim. I have no idea why.
set shell=bash
" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=
if &term =~ '256color'
  " Disable Background Color Erase (BCE) so that color schemes
  " work properly when Vim is used inside tmux and GNU screen.
  " See also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif

" keep more context when scrolling off the end of a buffer
set scrolloff=3

" Store temporary files in a central spot
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Fix slow O inserts
set timeout timeoutlen=1000 ttimeoutlen=100

" Normally, Vim messes with iskeyword when you open a shell file. This can
" leak out, polluting other file types even after a 'set ft=' change. This
" variable prevents the iskeyword change so it can't hurt anyone.
let g:sh_noisk=1

" Turn folding off for real, hopefully
set foldmethod=manual
set nofoldenable
" Insert only one space when joining lines that contain sentence-terminating
" punctuation like `.`.
set nojoinspaces
" If a file is changed outside of vim, automatically reload it without asking
set autoread

"Map escape key to jj -- much faster
imap jj <esc>
imap nn <esc>


" Keyboard  *******************************************************************
function Kbw()
  "(O)pen line -> (L)ine
  noremap l o
  noremap o l
  noremap L O
  "Search (N)ext -> (J)ump
  noremap j n
  noremap n j
  noremap J N
  noremap N J
  "(E)nd of word -> brea(K) of word
  noremap k e
  noremap e k
  noremap K E
  noremap E <nop>
  noremap h y
  "(Y)ank -> (H)aul
  noremap y h
  noremap H Y
  noremap Y H
endfunction

function Kbq()
  call UnmapWorkman()
endfunction

function UnmapWorkman()
  "Unmaps Workman keys
  silent! unmap h
  silent! unmap j
  silent! unmap k
  silent! unmap l
  silent! unmap y
  silent! unmap n
  silent! unmap e
  silent! unmap o
  silent! unmap H
  silent! unmap J
  silent! unmap K
  silent! unmap L
  silent! unmap Y
  silent! unmap N
  silent! unmap E
  silent! unmap O
endfunction

autocmd VimEnter * call Kbq()

" Switch between buffers
noremap <tab> :bn<CR>
noremap <S-tab> :bp<CR>

" Show bufexplorer"
noremap <leader>b :BufExplorer<CR>

" window splitting
nmap <leader>sw<left>  :topleft  vnew<CR>
nmap <leader>sw<right> :botright vnew<CR>
nmap <leader>sw<up>    :topleft  new<CR>
nmap <leader>sw<down>  :botright new<CR>

" buffer splitting
nmap <leader>s<left>   :leftabove  vnew<CR>
nmap <leader>s<right>  :rightbelow vnew<CR>
nmap <leader>s<up>     :leftabove  new<CR>
nmap <leader>s<down>   :rightbelow new<CR>

" split navigation
map <leader>h :wincmd h<CR>
map <leader>j :wincmd j<CR>
map <leader>k :wincmd k<CR>
map <leader>l :wincmd l<CR>

" Ignore some binary, versioning and backup files when auto-completing
set wildignore+=.svn,CVS,.git,*.swp,*.jpg,*.png,*.gif,*.pdf,*.bak,*.orig,*/public/*
" Set a lower priority for .old files
set suffixes+=.old

let g:ctrlp_working_path_mode = 'ra'
" Use git listing, including untracked files
unlet g:ctrlp_user_command
let g:ctrlp_user_command =
  \ ['.git', 'cd %s && git ls-files . -co --exclude-standard']


" NerdTree
let NERDTreeQuitOnOpen=1
let NERDTreeShowBookmarks=0
" open file browser
map <leader>p :NERDTreeToggle<cr>
"""""""turn off nerdtree:
""""""let loaded_nerd_tree=0
""""""
""""""
" EXTERNAL COPY / PASTE
" Press F2 before and after pasting from an external Window, not required for
" MacVim
set pastetoggle=<F2>

" AutoClose
let g:AutoClosePairs = {'(': ')', '{': '}', '[': ']', '"': '"', "'": "'", '#{': '}'}
let g:AutoCloseProtectedRegions = ["Character"]

" Easy commenting
nnoremap // :TComment<CR>
vnoremap // :TComment<CR>

" Using Ctags
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
" The above mappings allow the following functionality:
" Ctrl+ç (is equivalent to Ctrl+\): open definition in new tab
" Alt++ (is equivalent to Alt+]): open definition in vertical split 
" C++ (equivalent to C+]): go to definition
" C+T : jump back to caller.

" Ctags toggle tags window for current file:
nmap <F8> :TagbarToggle<CR>

" remap Ultisnips for compatibility for YCM
let g:UltiSnipsExpandTrigger = 'uu'
let g:UltiSnipsJumpForwardTrigger = 'uu'
let g:UltiSnipsJumpBackwardTrigger = 'UU'

" ---------------------------------------------------------------------------
" Ruby/Rails
" ---------------------------------------------------------------------------
"fix grep
"":let Grep_Find_Use_Xargs = 0
"":let Grep_Default_Filelist = '*.rb'

" Execute current buffer as ruby
map <S-r> :w !ruby<CR>

" Save current buffer and execute thru rspec
map <leader>t :w\|:!rspec --color %<cr>
map <leader>. :call ChipaironRunRspec()<cr>
function! ChipaironRunRspec()
  :w
  :Rrunner
endfunction


map <leader>gv :CommandTFlush<cr>\|:CommandT app/views<cr>
map <leader>gc :CommandTFlush<cr>\|:CommandT app/controllers<cr>
map <leader>gm :CommandTFlush<cr>\|:CommandT app/models<cr>
map <leader>gh :CommandTFlush<cr>\|:CommandT app/helpers<cr>
map <leader>gl :CommandTFlush<cr>\|:CommandT lib<cr>
map <leader>gp :CommandTFlush<cr>\|:CommandT public<cr>
map <leader>gs :CommandTFlush<cr>\|:CommandT public/stylesheets<cr>
map <leader>ga :CommandTFlush<cr>\|:CommandT app/assets<cr>

" View routes or Gemfile in large split
map <leader>gr :topleft :split config/routes.rb<cr>
map <leader>gg :topleft 100 :split Gemfile<cr>

" Skip to Model, View or Controller
map <Leader>m :Rmodel
map <Leader>v :Rview
map <Leader>c :Rcontroller

" Other files to consider Ruby
au BufRead,BufNewFile Gemfile,Rakefile,Thorfile,config.ru,Vagrantfile,Guardfile,Capfile,*.cap set ft=ruby
au BufRead,BufNewFile *.pdf.prawn set ft=ruby
autocmd BufNewFile,BufRead *.html.slim set filetype=slim

" Let .vimrc per directory overrides:
" Example to execute current js file on node:
" map <leader>t :w\|:!node %<cr>
set exrc            " enable per-directory .vimrc files
set secure          " disable unsafe commands in local .vimrc files

